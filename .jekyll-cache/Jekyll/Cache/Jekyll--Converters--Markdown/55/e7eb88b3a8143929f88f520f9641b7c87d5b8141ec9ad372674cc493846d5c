I"<h3 id="1案例">(1).案例</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Flux.just("1","2")
    .subscribe(c-&gt;{
            System.out.println("consumer:" + c);
    });
</code></pre></div></div>
<h3 id="2fluxsubscribe">(2).Flux.subscribe</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final Disposable subscribe(Consumer&lt;? super T&gt; consumer) {
    // consumer = help.lixin.samples.Flux2Test$$Lambda$7
    Objects.requireNonNull(consumer, "consumer");
    return subscribe(consumer, null, null);
}
</code></pre></div></div>
<h3 id="3fluxsubscribe">(3).Flux.subscribe</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final Disposable subscribe(
        @Nullable Consumer&lt;? super T&gt; consumer,
        @Nullable Consumer&lt;? super Throwable&gt; errorConsumer,
        @Nullable Runnable completeConsumer) {
           // consumer 订阅
           // errorConsumer 错误处理
           // completeConsumer 完成处理
    return subscribe(consumer, errorConsumer, completeConsumer, (Context) null);
}
</code></pre></div></div>
<h3 id="4fluxsubscribe">(4).Flux.subscribe</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final Disposable subscribe(
        @Nullable Consumer&lt;? super T&gt; consumer,
        @Nullable Consumer&lt;? super Throwable&gt; errorConsumer,
        @Nullable Runnable completeConsumer,
        // null
        @Nullable Context initialContext) {
    return subscribeWith(
        // 创建:reactor.core.publisher.LambdaSubscriber
        // 包课着正确消费者/错误消费者/完成处理等...
        new LambdaSubscriber&lt;&gt;(consumer, errorConsumer,completeConsumer,null,initialContext)
    );
}
</code></pre></div></div>
<h3 id="5lambdasubscriber">(5).LambdaSubscriber</h3>
<p>```
interface CoreSubscriber<T> extends Subscriber<T> {}</T></T></p>
:ET