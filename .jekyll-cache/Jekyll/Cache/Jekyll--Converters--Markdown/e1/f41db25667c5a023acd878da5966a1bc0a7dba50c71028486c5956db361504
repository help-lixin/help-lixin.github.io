I"?<h3 id="1pomxml配置">(1).pom.xml配置</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;groupId&gt;help.lixin&lt;/groupId&gt;
	&lt;artifactId&gt;springwebflux-demo&lt;/artifactId&gt;
	&lt;packaging&gt;jar&lt;/packaging&gt;
	&lt;version&gt;1.1.0&lt;/version&gt;
	&lt;name&gt;springwebflux ${project.version}&lt;/name&gt;

	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
		&lt;java.version&gt;1.8&lt;/java.version&gt;
	&lt;/properties&gt;

	&lt;dependencyManagement&gt;
		&lt;dependencies&gt;
			&lt;dependency&gt;
				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
				&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
				&lt;version&gt;Greenwich.RELEASE&lt;/version&gt;
				&lt;type&gt;pom&lt;/type&gt;
				&lt;scope&gt;import&lt;/scope&gt;
			&lt;/dependency&gt;
			&lt;dependency&gt;
				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
				&lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
				&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;
				&lt;type&gt;pom&lt;/type&gt;
				&lt;scope&gt;import&lt;/scope&gt;
			&lt;/dependency&gt;
			&lt;dependency&gt;
				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
				&lt;artifactId&gt;spring-cloud-netflix&lt;/artifactId&gt;
				&lt;version&gt;2.1.1.RELEASE&lt;/version&gt;
				&lt;type&gt;pom&lt;/type&gt;
				&lt;scope&gt;import&lt;/scope&gt;
			&lt;/dependency&gt;
		&lt;/dependencies&gt;
	&lt;/dependencyManagement&gt;

	&lt;dependencies&gt;
           &lt;!-- 导入webflux --&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
				&lt;configuration&gt;
					&lt;mainClass&gt;help.lixin.samples.Application&lt;/mainClass&gt;
				&lt;/configuration&gt;
				&lt;executions&gt;
					&lt;execution&gt;
						&lt;goals&gt;
							&lt;goal&gt;repackage&lt;/goal&gt;
						&lt;/goals&gt;
					&lt;/execution&gt;
				&lt;/executions&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;
&lt;/project&gt;
</code></pre></div></div>

<h3 id="2hellohandler">(2).HelloHandler</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package help.lixin.samples.handler;

import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;

import reactor.core.publisher.Mono;

public class HelloHandler {
	public Mono&lt;ServerResponse&gt; mono(ServerRequest request){
		// throw new RuntimeException("error");
		return ServerResponse.ok()    //
			    .contentType(MediaType.TEXT_PLAIN) //
			    .body(BodyInserters.fromObject("hello mono webflux"));
	}

	public Mono&lt;ServerResponse&gt; flux(ServerRequest request) {
		return ServerResponse.ok() //
				.contentType(MediaType.TEXT_PLAIN) //
				.body(BodyInserters.empty());
	}
	
}

</code></pre></div></div>
<h3 id="3routeconfig">(3).RouteConfig</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package help.lixin.samples.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.server.RequestPredicates;
import org.springframework.web.reactive.function.server.RouterFunction;
import org.springframework.web.reactive.function.server.RouterFunctions;
import org.springframework.web.reactive.function.server.ServerResponse;

import help.lixin.samples.handler.HelloHandler;

@Configuration
public class RouteConfig {

	@Bean
	public HelloHandler helloHandler() {
		return new HelloHandler();
	}

	@Bean
	public RouterFunction&lt;ServerResponse&gt; routes(HelloHandler helloHandler) {
		return RouterFunctions //
				.route(RequestPredicates.path("/api/mono"), helloHandler::mono);
	}
}

</code></pre></div></div>
<h3 id="4errorloghandler">(4).ErrorLogHandler</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package help.lixin.samples.advice;

import java.io.Serializable;

import org.springframework.core.annotation.Order;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebExceptionHandler;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Component
@Order(-2)
public class ErrorLogHandler implements WebExceptionHandler {

	@Override
	public Mono&lt;Void&gt; handle(ServerWebExchange exchange, Throwable ex) {
		exchange.getResponse().setStatusCode(HttpStatus.OK);
//		exchange.getResponse().getHeaders().add(HttpHeaders.CONTENT_TYPE, "application/json;charset=utf-8");
		ObjectMapper objectMapper = new ObjectMapper();
		
		Response response = new Response();
		response.setCode(HttpStatus.OK.value());
		response.setMessage("error ");
		byte[] bytes;
		DataBuffer wrap = null;
		try {
			bytes = objectMapper.writeValueAsBytes(response);
			wrap = exchange.getResponse().bufferFactory().wrap(bytes);
		} catch (JsonProcessingException ignore) {
		}
		return exchange.getResponse().writeWith(Flux.just(wrap));
	}
}

class Response implements Serializable {
	private static final long serialVersionUID = 8212733970119974320L;
	private Integer code;
	private String message;

	public Integer getCode() {
		return code;
	}

	public void setCode(Integer code) {
		this.code = code;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}
}

</code></pre></div></div>
<h3 id="5application">(5).Application</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package help.lixin.samples;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
}

</code></pre></div></div>
<h3 id="6访问">(6).访问</h3>
<p><img src="/assets/webflux/images/webflux-helloworld.png" alt="&quot;Spring WebFlux Hello World(Function)&quot;" /></p>
:ET